#!@SBINDIR@/openrc-run
# Copyright (c) 2007-2008 Roy Marples <roy@marples.name>
# Released under the 2-clause BSD license.

description="Set up the /dev directory"

depend()
{
	provide dev-mount
	before dev
	keyword -prefix -vserver -lxc
}

umount_olddev()
{
	local mtp
	if mountinfo -q /dev; then
		mountinfo | \
		awk '/^\/run\/olddev(\/.*)?$/ { mtp[++n]=$0 } END{ for(;n>0;n--) print mtp[n] }' | \
		while IFS= read mtp; do
			umount "$mtp"  >/dev/null 2>&1
		done
	fi
}

mount_dev()
{
	local devfstype
	# Some devices require exec, Bug #92921
	local mountopts="exec,nosuid,mode=0755"
	if yesno ${static_dev:-no}; then
		einfo "Using static /dev"
		return 0
	fi
	if fstabinfo -q /dev; then
		if mountinfo -q /dev; then
			ebegin "Moving existing /dev to /run/olddev"
			mkdir -p /run/olddev
			chmod 700 /run/olddev
			mount -n --move /dev /run/olddev
			eend $?
		fi
		ebegin "$msg /dev according to @SYSCONFDIR@/fstab"
		fstabinfo --mount /dev
		eend $?
		return 0
	fi
	if mountinfo -q /dev; then
		ebegin "Remounting /dev to force required options"
		mount -n -o remount,$mountopts dev /dev
		eend $?
		return 0
	fi
	if grep -q devtmpfs /proc/filesystems; then
		devfstype=devtmpfs
		mountopts="$mountopts,size=10M"
	elif grep -q tmpfs /proc/filesystems; then
		devfstype=tmpfs
		mountopts="$mountopts,size=10M"
	fi
	if [ -n "$devfstype" ]; then
		ebegin "Mounting $devfstype on /dev"
		mount -n -t $devfstype -o $mountopts dev /dev
		eend $?
	else
		ewarn "This kernel does not have devtmpfs or tmpfs support."
		ewarn "Assuming you want static /dev. If this is not the case,"
		ewarn "please set the CONFIG_DEVTMPFS or CONFIG_TMPFS option"
		ewarn "in your kernel."
	fi
}

mknod_c()
{
	# make sure we get the nodes we want (replacing plain files where necessary)
	local name
	name=$1  # always pass device path as first argument
	shift
	if ! [ -c $name ]; then
		rm -f $name
		mknod $name c "$@"
	fi
}

seed_dev()
{
	# Seed /dev with some things that we know we need

	# creating /dev/console, /dev/tty and /dev/tty1 to be able to write
	# to $CONSOLE with/without bootsplash before udevd creates it
	mknod_c /dev/console 5 1 -m 600
	mknod_c /dev/tty1 4 1 -m 620
	mknod_c /dev/tty 5 0 -m 666

	# udevd will dup its stdin/stdout/stderr to /dev/null
	# and we do not want a file which gets buffered in ram
	mknod_c /dev/null 1 3 -m 666

	# so udev can add its start-message to dmesg
	mknod_c /dev/kmsg 1 11 -m 660

	# Mount required stuff as user may not have then in /etc/fstab
	for x in \
		"mqueue /dev/mqueue 1777 ,nodev mqueue" \
		"devpts /dev/pts 0755 ,gid=5,mode=0620 devpts" \
		"tmpfs /dev/shm 1777 ,nodev,mode=1777 shm" \
	; do
		set -- $x
		grep -Eq "[[:space:]]+$1$" /proc/filesystems || continue
		mountinfo $2 && continue

		if [ ! -d $2 ]; then
			mkdir -m $3 -p $2 >/dev/null 2>&1 || \
				ewarn "Could not create $2!"
		fi

		if [ -d $2 ]; then
			ebegin "Mounting $2"
			if ! fstabinfo --mount $2; then
				mount -n -t $1 -o noexec,nosuid$4 $5 $2
			fi
			eend $?
		fi
	done
}

restorecon_dev()
{
	if [ -x /sbin/restorecon ]; then
		ebegin "Restoring SELinux contexts in /dev"
		restorecon -rF /dev >/dev/null 2>&1
		eend $?
	fi

	return 0
}

start()
{
	mount_dev
	seed_dev
	restorecon_dev
	umount_olddev
	return 0
}
